library(readr)
Datagenus <- read_delim("data/Datagenus.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(Datagenus)
# Création de la matrice des distances euclidiennes:
dp=dist(datapeuple, method="euclidean")
datapeuple <- Datagenus[1:1000,] # On ne prend pas la ligne 1001
# Création de la matrice des distances euclidiennes:
dp=dist(datapeuple, method="euclidean")
# Création de la matrice des distances euclidiennes:
dp <- dist(datapeuple, method="euclidean")
# Dataframe ----
Datagenus <- read.csv("data/Datagenus.csv", sep=";")
data <- Datagenus[1:1000,] # On ne prend pas la ligne 1001
especes <- paste0("gen", 1:27)
datapeuple <- as.matrix(data[especes] / data$surface) #densité de peuplement
# Initialiser une matrice pour stocker les contributions par variable
n = nrow(datapeuple)
p = ncol(especes)
contributions <- matrix(0,n,p)
contributions <- matrix(0:0,n,p)
contributions <- matrix(0:0,nrow = n , ncol = p)
contributions <- matrix(0,nrow = n , ncol = p)
# Standardiser ? ----
# Initialiser une matrice pour stocker les contributions par variable
n <- nrow(datapeuple)
p <- ncol(especes)
p <- 27
contributions <- matrix(0,nrow = n , ncol = p)
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i+1:n) {
# Différence au carré pour chaque variable
diff <- (datapeuple[i, ] - datapeuple[j, ])^2
# Distance totale (somme des différences au carré)
d <- sum(diff)
# Contribution de chaque variable
if (d != 0) {
contrib[i,j] <- round((diff/d)*100,2)
}
}
}
# Dataframe ----
Datagenus <- read.csv("data/Datagenus.csv", sep=";")
data <- Datagenus[1:1000,] # On ne prend pas la ligne 1001
especes <- paste0("gen", 1:27)
datapeuple <- as.matrix(data[especes] / data$surface) #densité de peuplement
# Standardiser ? ----
# Initialiser une matrice pour stocker les contributions par variable
n <- nrow(datapeuple)
p <- 27
contrib <- matrix(0,nrow = n , ncol = p)
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i+1:n) {
# Différence au carré pour chaque variable
diff <- (datapeuple[i, ] - datapeuple[j, ])^2
# Distance totale (somme des différences au carré)
d <- sum(diff)
# Contribution de chaque variable
if (d != 0) {
contrib[i,j] <- round((diff/d)*100,2)
}
}
}
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i+1:n) {
# Différence au carré pour chaque variable
diff <- (datapeuple[i, ] - datapeuple[j, ])^2
# Distance totale (somme des différences au carré)
d <- sum(diff)
# Contribution de chaque variable
if (d != 0) {
contrib[i,j,] <- round((diff/d)*100,2)
}
}
}
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i+1:n) {
# Différence au carré pour chaque variable
diff <- (datapeuple[i, ] - datapeuple[j, ])^2
# Distance totale (somme des différences au carré)
d <- sum(diff)
# Contribution de chaque variable
if (d != 0) {
contrib[i ,j , ] <- round((diff/d)*100,2)
}
}
}
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i:n) {
# Différence au carré pour chaque variable
diff <- (datapeuple[i, ] - datapeuple[j, ])^2
# Distance totale (somme des différences au carré)
d <- sum(diff)
# Contribution de chaque variable
if (d != 0) {
contrib[i ,j , ] <- round((diff/d)*100,2)
}
}
}
View(datapeuple)
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i:n) {
# Différence au carré pour chaque variable
diff <- (datapeuple[i, ] - datapeuple[j, ])^2
# Distance totale (somme des différences au carré)
d <- sum(diff)
# Contribution de chaque variable
if (d != 0) {
contrib[i ,j , ] <- round((diff/d)*100,2)
}
}
}
densite <- as.matrix(data[especes] / data$surface)
# Standardiser ? ----
# Initialiser une matrice pour stocker les contributions par variable
n <- nrow(datapeuple)
p <- 27
contrib <- matrix(0,nrow = n , ncol = p)
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i:n) {
# Différence au carré pour chaque variable
diff <- (datapeuple[i, ] - datapeuple[j, ])^2
# Distance totale (somme des différences au carré)
d <- sum(diff)
# Contribution de chaque variable
if (d != 0) {
contrib[i ,j , ] <- round((diff/d)*100,2)
}
}
}
# Calcul direct de la matrice des distances
# Initialiser une matrice pour stocker les contributions par variable
n = 1000 # Nombre d'individus
p = 27   # Nombre de caractéristique
contributions <- array(0, dim = c(n, n, p))
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i:n) {
# Différence au carré pour chaque variable
differences_squared <- (densite[i, ] - densite[j, ])^2
# Distance totale (somme des différences au carré)
distance_squared <- sum(differences_squared)
# Contribution de chaque variable
if (distance_squared != 0) {
contributions[i, j, ] <- round((differences_squared / distance_squared)*100,2)
}
}
}
print(contributions[1, 800,])
# Standardiser ? ----
# Initialiser une matrice pour stocker les contributions par variable
n <- nrow(datapeuple)
print(n)
# Calcul direct de la matrice des distances
# Initialiser une matrice pour stocker les contributions par variable
n = nrow(datapeuple) # Nombre d'individus
p = 27   # Nombre de caractéristique
contributions <- array(0, dim = c(n, n, p))
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i:n) {
# Différence au carré pour chaque variable
differences_squared <- (densite[i, ] - densite[j, ])^2
# Distance totale (somme des différences au carré)
distance_squared <- sum(differences_squared)
# Contribution de chaque variable
if (distance_squared != 0) {
contributions[i, j, ] <- round((differences_squared / distance_squared)*100,2)
}
}
}
print(contributions[1, 800,])
# Standardiser ? ----
# Initialiser une matrice pour stocker les contributions par variable
n <- nrow(datapeuple)
print(n)
p <- 27
contrib <- array(0,nrow = n , ncol = p)
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i:n) {
# Différence au carré pour chaque variable
diff <- (datapeuple[i, ] - datapeuple[j, ])^2
# Distance totale (somme des différences au carré)
d <- sum(diff)
# Contribution de chaque variable
if (d != 0) {
contrib[i ,j , ] <- round((diff/d)*100,2)
}
}
}
# Standardiser ? ----
# Initialiser une matrice pour stocker les contributions par variable
n <- nrow(datapeuple)
p <- 27
contrib <- array(0, dim = c(n, n, p))
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i:n) {
# Différence au carré pour chaque variable
diff <- (datapeuple[i, ] - datapeuple[j, ])^2
# Distance totale (somme des différences au carré)
d <- sum(diff)
# Contribution de chaque variable
if (d != 0) {
contrib[i ,j , ] <- round((diff/d)*100,2)
}
}
}
# Interprétation ----
dp <- as.matrix(dist(datapeuple, method="euclidean"))
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i+1:n) {
# Différence au carré pour chaque variable
diff <- (datapeuple[i, ] - datapeuple[j, ])^2
# Distance totale (somme des différences au carré)
d <- sum(diff)
# Contribution de chaque variable
if (d != 0) {
contrib[i ,j , ] <- round((diff/d)*100,2)
}
}
}
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i:n) {
# Différence au carré pour chaque variable
diff <- (datapeuple[i, ] - datapeuple[j, ])^2
# Distance totale (somme des différences au carré)
d <- sum(diff)
# Contribution de chaque variable
if (d != 0) {
contrib[i ,j , ] <- round((diff/d)*100,2)
}
}
}
contrib[1, 6, ]
contrib[1, 12, ]
contrib[5,18, ]
# Centrer - réduire
p <- ncol(datapeuple)
moyennes_especes <- (colMeans(datapeuple))
mat_moyenne <- matrix(moyennes_especes, nrow = n, ncol = p, byrow = TRUE) # matrice des moyennes
sd_especes <- sqrt(colSums((datapeuple - mat_moyenne)^2) / (n))
mat_sd <- matrix(sd_especes, nrow = n, ncol = p, byrow = TRUE) # matrice des écarts-types
datapeuple_cr <- (datapeuple - mat_moyenne) / mat_sd # matrice densité de peuplement centrée-réduite
# Interprétation ----
dp <- as.matrix(dist(datapeuple_cr, method="euclidean"))
CAHDP = hclust(d=dp, method = "ward.D")
# Interprétation ----
dp <- as.matrix(dist(datapeuple_cr, method="euclidean"))
CAHDP = hclust(d=dp, method = "ward.D")
# Chargement des données ----
Datagenus <- read.csv("data/Datagenus.csv", sep=";")
# Préparation des données ----
data <- Datagenus[1:1000, ] # On ne prend pas en compte la ligne 1001
especes <- paste0("gen", 1:27) # Noms des colonnes des espèces
colonnes_selectionnees <- c(especes, "surface", "forest", "geology") # Colonnes à conserver
data <- data[, colonnes_selectionnees]
# Calcul des densités de peuplement par unité de surface ----
densite_peuplement <- as.matrix(data[especes] / data$surface) # Conversion en matrice
# Standardisation si nécessaire ----
n <- nrow(densite_peuplement) # Nombre de parcelles
p <- ncol(densite_peuplement) # Nombre d'espèces
# Calcul des moyennes et écarts-types par espèce
moyennes_especes <- colMeans(densite_peuplement)
sd_especes <- sqrt(colSums((densite_peuplement - matrix(moyennes_especes, n, p, byrow = TRUE))^2) / (n))
# Calcul direct de la matrice des distances
# Initialiser une matrice pour stocker les contributions par variable
q = 27   # Nombre de caractéristiques
contributions <- array(0, dim = c(n, n, p))
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i:n) {
# Différence au carré pour chaque variable
diff <- (densite_peuplement[i, ] - densite_peuplement[j, ])^2
# Distance totale (somme des différences au carré)
dist <- sum(diff)
# Contribution de chaque variable
if (distance_squared != 0) {
contributions[i, j, ] <- round((differences_squared / distance_squared)*100,2)
}
}
}
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i:n) {
# Différence au carré pour chaque variable
diff <- (densite_peuplement[i, ] - densite_peuplement[j, ])^2
# Distance totale (somme des différences au carré)
dist <- sum(diff)
# Contribution de chaque variable
if (distance_squared != 0) {
contributions[i, j, ] <- round((diff / dist)*100,2)
}
}
}
# Calcul des distances et contributions
for (i in 1:n) {
for (j in i:n) {
# Différence au carré pour chaque variable
diff <- (densite_peuplement[i, ] - densite_peuplement[j, ])^2
# Distance totale (somme des différences au carré)
dist <- sum(diff)
# Contribution de chaque variable
if (dist != 0) {
contributions[i, j, ] <- round((diff / dist)*100,2)
}
}
}
print(contributions[1, 800,])
# Centrage et réduction des densités
densite_centree_reduite <- (densite_peuplement - matrix(moyennes_especes, n, p, byrow = TRUE)) /
matrix(sd_especes, n, p, byrow = TRUE)
datapeuple <- as.data.frame(densite_centree_reduite)
# Calcul des distances euclidiennes ----
dp <- dist(datapeuple, method = "euclidean")  # Matrice des distances
# CAH avec Ward ----
CAHDP <- hclust(d = dp, method = "ward.D")  # CAH avec la méthode de Ward
dev.new()
plot(CAHDP)  # Dendrogramme de la hiérarchie de la CAH
# Partition en k=4 classes ----
PDP4 = cutree(tree = CAHDP, k=10)
# Calcul des R2 pour chaque variable ----
R2_PDP4 = cbind(rep(0 , ncol(datapeuple)))
for (i in cbind(1:ncol(datapeuple))) {
R2_PDP4[i] = summary(lm(datapeuple[,i]~as.factor(PDP4)))$r.squared
}
row.names(R2_PDP4) = colnames(datapeuple)
# Calcul du R2 global ----
R2G_PV4 = mean(R2_PDP4)
# Résultats finaux ----
print("R2 global pour la partition en 4 classes :")
print(R2G_PV4)
# CAH avec Max ----
CAHDP2 <- hclust(d = dp, method = "complete")  # CAH avec la méthode de Max
dev.new()
plot(CAHDP2)  # Dendrogramme de la hiérarchie de la CAH
# CAH avec Max ----
CAHDP3 <- hclust(d = dp, method = "average")  # CAH avec la méthode de Max
dev.new()
plot(CAHDP3)  # Dendrogramme de la hiérarchie de la CAH
